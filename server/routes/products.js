import express from "express";
import Product from "../models/Product.js";
import jwt from "jsonwebtoken";

const router = express.Router();

// üîê Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
function verifyToken(req, res, next) {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) {
    console.log("‚õîÔ∏è –¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π");
    return res.status(401).json({ error: "–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞" });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.adminId = decoded.id;
    next();
  } catch (err) {
    console.log("‚õîÔ∏è –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω:", err.message);
    res.status(403).json({ error: "–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω" });
  }
}

// üì¶ GET: –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ (–∞–±–æ —Ñ—ñ–ª—å—Ç—Ä –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é)
router.get("/", async (req, res) => {
  const category = req.query.category;

  try {
    const products = category
      ? await Product.find({ category })
      : await Product.find();

    res.json(products);
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤:", err.message);
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏" });
  }
});

// üì¶ GET: –û—Ç—Ä–∏–º–∞—Ç–∏ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –∑–∞ ID
router.get("/:id", async (req, res) => {
  try {
    const product = await Product.findById(req.params.id);
    if (!product) return res.status(404).json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    res.json(product);
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É:", err.message);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// ‚ûï POST: –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä (üîê –∑ —Ç–æ–∫–µ–Ω–æ–º)
router.post("/", verifyToken, async (req, res) => {
  console.log("üì• –î–∞–Ω—ñ, —è–∫—ñ –Ω–∞–¥—ñ–π—à–ª–∏:", req.body);

  try {
    const { name, price, category } = req.body;

    // üõë –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    if (!name || !price || !category) {
      console.log("‚ö†Ô∏è –û–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –≤—ñ–¥—Å—É—Ç–Ω—ñ");
      return res.status(400).json({
        error: "–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: name, price –∞–±–æ category"
      });
    }

    const newProduct = new Product(req.body);
    await newProduct.save();

    console.log("‚úÖ –¢–æ–≤–∞—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ:", newProduct);
    res.status(201).json(newProduct);
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É:", err.message);
    res.status(400).json({
      error: "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É",
      details: err.message
    });
  }
});

// ‚úèÔ∏è PUT: –û–Ω–æ–≤–∏—Ç–∏ —Ç–æ–≤–∞—Ä –∑–∞ ID (üîê –∑ —Ç–æ–∫–µ–Ω–æ–º)
router.put("/:id", verifyToken, async (req, res) => {
  try {
    const updated = await Product.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true }
    );

    if (!updated) return res.status(404).json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    res.json(updated);
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É:", err.message);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É" });
  }
});

// ‚ùå DELETE: –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä –∑–∞ ID (üîê –∑ —Ç–æ–∫–µ–Ω–æ–º)
router.delete("/:id", verifyToken, async (req, res) => {
  try {
    const deleted = await Product.findByIdAndDelete(req.params.id);

    if (!deleted) return res.status(404).json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    res.json({ message: "–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ" });
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É:", err.message);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É" });
  }
});

export default router;
