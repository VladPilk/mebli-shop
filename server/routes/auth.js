import express from "express";
import jwt from "jsonwebtoken";
import User from "../models/User.js";

const router = express.Router();

// üîë –°—Ç–≤–æ—Ä–µ–Ω–Ω—è JWT —Ç–æ–∫–µ–Ω–∞
function createToken(user) {
  return jwt.sign(
    { id: user._id, role: user.role },
    process.env.JWT_SECRET,
    { expiresIn: "7d" }
  );
}

// üì© POST /api/register
router.post("/register", async (req, res) => {
  try {
    const { email, password, role } = req.body;

    if (!email || !password) {
      return res.status(400).json({ error: "Email —ñ –ø–∞—Ä–æ–ª—å –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ" });
    }

    const existing = await User.findOne({ email });
    if (existing) {
      return res.status(400).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ —ñ—Å–Ω—É—î" });
    }

    const user = new User({ email, password, role });
    await user.save();

    const token = createToken(user);
    res.status(201).json({ token, role: user.role });
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", err);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ" });
  }
});

// üîê POST /api/login
router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;

    const user = await User.findOne({ email });
    if (!user || !(await user.comparePassword(password))) {
      return res.status(401).json({ error: "–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å" });
    }

    const token = createToken(user);
    res.json({ token, role: user.role });
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É:", err);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É" });
  }
});

export default router;
